#
# Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
#

import os, platform, posixpath, glob

CacheDir( '.sconscache' )

buildOS = platform.system()
Export( 'buildOS' );
buildArch = ARGUMENTS.get( 'ARCH', platform.machine() )
Export( 'buildArch' )
buildType = ARGUMENTS.get( 'TYPE', 'Debug' )
Export( 'buildType' )
thirdPartyDir = os.path.join(os.getcwd(), 'ThirdParty' )

# [pzion 20110726] !!!!!!!!!!!!!!!!!!!!
# When you change the version number,
# don't forget to consider the expiry
# and cache generation!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
FABRIC_NAME='Fabric Engine'
FABRIC_COMPANY_NAME='Fabric Technologies Inc.'
FABRIC_DESC='High Performance Computing for the Web'
FABRIC_COPYRIGHT='Copyright 2010-2011 ' + FABRIC_COMPANY_NAME + '  All rights reserved.'
FABRIC_URL="http://fabric-engine.com"
FABRIC_VERSION_MAJ='1'
FABRIC_VERSION_MIN='0'
FABRIC_VERSION_REV='9'
FABRIC_VERSION_SUFFIX='-alpha'
# To generate expiry 30 days from now: echo $(($(date +%s) + 30*24*60*60))
FABRIC_EXPIRY='1316630445'
FABRIC_CACHE_GENERATION='4'
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

FABRIC_VERSION = FABRIC_VERSION_MAJ + '.' + FABRIC_VERSION_MIN + '.' + FABRIC_VERSION_REV + FABRIC_VERSION_SUFFIX
Export( 'FABRIC_VERSION' )

template = Builder( action = "\
  sed \
    -e 's/{{FABRIC_OS}}/"+buildOS+"/g' \
    -e 's/{{FABRIC_ARCH}}/"+buildArch+"/g' \
    -e 's/{{FABRIC_COMPANY_NAME}}/"+FABRIC_COMPANY_NAME+"/g' \
    -e 's/{{FABRIC_NAME}}/"+FABRIC_NAME+"/g' \
    -e 's/{{FABRIC_DESC}}/"+FABRIC_DESC+"/g' \
    -e 's/{{FABRIC_COPYRIGHT}}/"+FABRIC_COPYRIGHT+"/g' \
    -e 's,{{FABRIC_URL}},"+FABRIC_URL+",g' \
    -e 's/{{FABRIC_VERSION_MAJ}}/"+FABRIC_VERSION_MAJ+"/g' \
    -e 's/{{FABRIC_VERSION_MIN}}/"+FABRIC_VERSION_MIN+"/g' \
    -e 's/{{FABRIC_VERSION_REV}}/"+FABRIC_VERSION_REV+"/g' \
    -e 's/{{FABRIC_VERSION_SUFFIX}}/"+FABRIC_VERSION_SUFFIX+"/g' \
    -e 's/{{FABRIC_EXPIRY}}/"+FABRIC_EXPIRY+"/g' \
    -e 's/{{FABRIC_VERSION}}/"+FABRIC_VERSION+"/g' \
    -e 's/{{FABRIC_CACHE_GENERATION}}/"+FABRIC_CACHE_GENERATION+"/g' \
  <$SOURCE >$TARGET \
" )

env = Environment(
  ENV={ 'PATH': os.environ['PATH']+os.pathsep+os.path.join(thirdPartyDir,'bin',buildOS) },
  FABRIC_BUILD_OS=buildOS,
  FABRIC_BUILD_ARCH=buildArch,
  FABRIC_BUILD_TYPE=buildType,
  TARGET_ARCH = buildArch
  )

if buildOS == 'Windows':
  env['ENV']['TMP'] = os.environ['TMP']

if not ARGUMENTS.get( 'VERBOSE' ):
	env['CCCOMSTR']       = 'Compiling       $SOURCE'
	env['CXXCOMSTR']      = 'Compiling       $SOURCE'
	env['SHCCCOMSTR']     = 'Compiling       $SOURCE'
	env['SHCXXCOMSTR']    = 'Compiling       $SOURCE'
	env['YACCCOMSTR']     = 'Bison           $SOURCE'
	env['ARCOMSTR']       = 'StaticLibrary   $TARGET'
	env['SHLINKCOMSTR']   = 'SharedLibrary   $TARGET'
	env['RANLIBCOMSTR']   = 'Ranlib          $TARGET'
	env['LINKCOMSTR']     = 'Linking         $TARGET'
	env['LDMODULECOMSTR'] = 'LoadableModule  $TARGET'
env.Append( BUILDERS = { 'Template': template } )

if buildType == 'Release':
  env.Append( CPPDEFINES = 'NDEBUG' )

if buildOS == 'Windows' and buildType == 'Debug':
  env.Append( PDB='${TARGET.base}.pdb' )

# check for buildOS specific flags
buildFlags = { 
  # === OSX ===
  'Darwin': {
    'ccflags': [ '-Wall', '-Werror', '-fvisibility=hidden' ],
    'cxxflags': [ '-fno-rtti' ],
    'linkflags' : [ '-w' ],
    'i386' : {
      'ccflags': [ '-m32' ],
      'linkflags': [ '-m32' ]
      },
    'x86_64' : {
      'ccflags': [ '-m64' ],
      'linkflags': [ '-m64' ]
      },
    'Debug' : {
      'ccflags': [ '-g' ]
      },
    'Release' : {
      'ccflags': [ '-O2' ]
      },
    }, 
  # === LINUX ===
  'Linux': {
    'ccflags': ['-fPIC'],
    'cxxflags': [ '-fno-rtti' ],
    'i686' : {
      'ccflags': [ '-m32' ],
      'linkflags': [ '-m32' ]
      },
    'x86_64' : {
      'ccflags': [ '-m64' ],
      'linkflags': [ '-m64' ]
      },
    'Debug' : {
      'ccflags': [ '-g' ]
      },
    'Release' : {
      'ccflags': [ '-O2' ]
      },
    }, 
  # === WINDOWS ===
  'Windows': {
    'ccDefs': [ 
      '_SCL_SECURE_NO_WARNINGS=1',
      '_ITERATOR_DEBUG_LEVEL=0',
      '_SECURE_SCL=0'
    ],
    'ccflags': [ 
      '/GR-', '/EHsc', 
      '/wd4624'    ],
    'linkflags': [ 'chkstk.obj' ],
    'x86' : {
      'ccflags': [ ],
      'linkflags': [ ]
      },
    'AMD64' : {
      'ccflags': [ ],
      'linkflags': [ ]
      },
    'Debug' : {
      'ccflags': [ '/Od', '/Z7', '/MTd' ]
      },
    'Release' : {
      'ccflags': [ '/Ox', '/MT' ]
      },
    }
  }

osFlags = buildFlags[buildOS]

if 'ccDefs' in osFlags:
  env.Append( CPPDEFINES = osFlags['ccDefs'] )  
if 'ccflags' in osFlags:
  env.Append( CCFLAGS = osFlags['ccflags'] )
if 'cxxflags' in osFlags:
  env.Append( CXXFLAGS = osFlags['cxxflags'] )
if 'linkflags' in osFlags:
  env.Append( LINKFLAGS = osFlags['linkflags'] )

subTypes = [ buildArch, buildType ]

for subType in subTypes:
  if subType in osFlags:
    osSubFlags = osFlags[subType]
    if 'ccDefs' in osSubFlags:
      env.Append( CPPDEFINES = osSubFlags['ccDefs'] )  
    if 'ccflags' in osSubFlags:
      env.Append( CCFLAGS = osSubFlags['ccflags'] )
    if 'cxxflags' in osSubFlags:
      env.Append( CXXFLAGS = osSubFlags['cxxflags'] )
    if 'linkflags' in osSubFlags:
      env.Append( LINKFLAGS = osSubFlags['linkflags'] )

buildDirBase = os.path.join( '#build', buildOS, buildArch, buildType )
buildDir = os.path.join( buildDirBase, 'Fabric' )
env.Append( BUILDDIR = [Dir(buildDir).abspath] )

distDir = env.Dir( '#dist' )
archDistDir = distDir.Dir(buildOS).Dir(buildArch).Dir(buildType)
Export( 'archDistDir' )
packageName = 'FabricEngine'
Export( 'packageName' )
installerName = packageName + '-' + buildOS + '-' + buildArch
Export( 'installerName' )
if buildOS == "Darwin":
  installerRootDistDir = archDistDir.Dir( packageName )
  libraryDistDir = installerRootDistDir.Dir( 'Library' )
  npapiDistDir = libraryDistDir.Dir( 'Internet Plug-Ins' )
  fabricExtsDistDir = libraryDistDir.Dir('Fabric').Dir('Exts')
  Export( 'installerRootDistDir' )
elif buildOS == "Windows":
  installerRootDistDir = archDistDir.Dir( packageName )
  npapiDistDir = installerRootDistDir
  fabricExtsDistDir = installerRootDistDir.Dir( 'Exts' )
  Export( 'installerRootDistDir' )
else:
  npapiDistDir = archDistDir.Dir( 'NPAPI' )
  fabricExtsDistDir = archDistDir.Dir( 'Exts' )
Export( 'npapiDistDir', 'fabricExtsDistDir' )

env.Append( CPPPATH=[buildDirBase] )
Export( 'env' )

SConscript( dirs=['ThirdParty'], variant_dir=os.path.join( buildDir, 'ThirdParty' ) )
SConscript( dirs=['Base'], variant_dir=os.path.join( buildDir, 'Base' ) )
SConscript( dirs=['Core'], variant_dir=os.path.join( buildDir, 'Core' ) )
SConscript( dirs=['Tools'], variant_dir=os.path.join( buildDir, 'Tools' ) )
SConscript( dirs=['Clients'], variant_dir=os.path.join( buildDir, 'Clients' ) )
SConscript( dirs=['EDK'], variant_dir=os.path.join( buildDir, 'EDK' ) )
SConscript( dirs=['Exts'], variant_dir=os.path.join( buildDir, 'Exts' ) )
if 'installer' in COMMAND_LINE_TARGETS:
  SConscript( dirs=['Installer'], variant_dir=os.path.join( buildDir, 'Installer' ) )
